.chapter(data-title='IVR Phone Tree')
  .step(data-file='src/main/webapp/WEB-INF/web.xml', data-mode='xml')
    :markdown
      ## About this application

      ![Extra Terrestrial Phone Home
      Service](//howtodocs.s3.amazonaws.com/logo-et-phone2.png)

      This [Servlets](//docs.oracle.com/javaee/6/tutorial/doc/bnafd.html) sample
      application is modeled after a typical call center experience, but with
      more [Reese's
      Pieces](//en.wikipedia.org/wiki/Reese%27s_Pieces#ET:_The_Extra-Terrestrial).

      Stranded aliens can call a phone number and receive instructions on how
      to get out of earth safely, or call their home planet
      directly[.](//bit.ly/asogi) In this tutorial, we'll show you the
      key bits of code to make this work.

      To run this sample app yourself, [download the code and follow the
      instructions on GitHub](//github.com/TwilioDevEd/ivr-phone-tree-
      servlets).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**
      * [Java Servlet Technology](//docs.oracle.com/javaee/6/tutorial/doc/bnafd.html)
      * [The Twilio Java Helper Library](//www.twilio.com/docs/java/install)

  .step(data-file='src/main/webapp/WEB-INF/web.xml', data-mode='xml')
    :markdown
      ## Answering the Phone Call

      To initiate the phone tree, we need to configure one of our Twilio
      numbers to send our web application an HTTP request when we
      get an incoming call.

      [Click on one of your
      numbers](//www.twilio.com/user/account/phone-numbers/incoming) and
      configure the Voice URL to point to our app. In our code the route
      will be `/ivr/welcome`.

      ![Configuring a Twilio Number](//s3.amazonaws.com/howtodocs/number-
      config.png)

      ---

      **See Also:**
      * [Configuring Twilio Numbers for Voice](//www.twilio.com/help/faq/voice/how-do-i-assign-my-twilio-number-to-my-voice-application)
      * [Using ngrok to test your Twilio webhooks locally](//www.twilio.com/blog/2013/10/test-your-webhooks-locally-with-ngrok.html)

  .step(data-file='src/main/java/com/twilio/phonetree/servlet/ivr/WelcomeServlet.java',
  data-highlight='15-41')
    :markdown
      ## Responding to the Twilio request with TwiML

      Our Twilio number is now configured to [send HTTP
      requests](//www.twilio.com/docs/api/twiml/twilio_request) to this
      controller action on any incoming voice calls. Our app responds with
      [TwiML](//www.twilio.com/docs/api/twiml) to tell Twilio what to do
      in response to the message.

      In this case we tell Twilio to
      [`Gather`](//www.twilio.com/docs/api/twiml/gather) the input from
      the caller and we [`Play`](//www.twilio.com/docs/api/twiml/play) a
      welcome message.

      ---

      **See Also:**
      * [Gather attributes](//www.twilio.com/docs/api/twiml/gather#attributes)
      * [Play 'loop' attribute](//www.twilio.com/docs/api/twiml/play#attributes-loop)

  .step(data-file='src/main/java/com/twilio/phonetree/servlet/ivr/WelcomeServlet.java',
  data-highlight='20')
    :markdown
      ## Where to send the caller's input

      The *gather's* `action` parameter takes an absolute or relative URL as a
      value - in our case, the `/menu/show` route.

      When the caller has finished entering digits Twilio will make a
      GET or POST request to this URL including a
      [`Digits`](//www.twilio.com/docs/api/twiml/gather#attributes-
      action-parameters) parameter with the number our caller chose.

      After making this request, Twilio will continue the current call using
      the TwiML received in your response. Any TwiML verbs occuring after a
      `<Gather>` are unreachable, unless the caller enters no digits.

      ---

      **See Also:**
      * [Twilio Request parameters](//www.twilio.com/docs/api/twiml/twilio_request#synchronous-request-parameters)

  .step(
    data-file='src/main/java/com/twilio/phonetree/servlet/menu/ShowServlet.java',
    data-highlight='13-37')
    :markdown
      ## The Main Menu: Processing the caller's selection

      If our caller chooses '1' for directions, we use a helper method defined
      below, `getReturnInstructions`, to respond with TwiML that will
      [`Say`](//www.twilio.com/docs/api/twiml/say) directions to our
      caller's extraction point.

      If the caller chooses '2' to call her home planet, then we need to
      gather more input from her. We'll cover this in the next step.

      If the caller enters anything else we respond with a TwiML
      [`Redirect`](//www.twilio.com/docs/api/twiml/redirect) to the main
      menu.

      ---

      **See Also:**
      * [The TwiML Hangup verb](//www.twilio.com/docs/api/twiml/hangup)
      * [TwiMl Say: Language Options](//www.twilio.com/docs/api/twiml/say#attributes-alice)

  .step(
    data-file='src/main/java/com/twilio/phonetree/servlet/menu/ShowServlet.java',
    data-highlight='26, 61-81')
    :markdown
      ## The Planet's Directory: Collect more input from the caller

      If our caller chooses to call her home planet we will tell her the planet
      directory. This is similar to a typical "company directory" feature of
      most IVRs.

      In our response we use a `Gather` verb to receive our caller's
      input. The `action` verb points this time to the `planets` route, which
      will switch our response based on what the caller chooses.

      Let's look at that servlet next.

  .step(data-file='src/main/java/com/twilio/phonetree/servlet/commuter/ConnectServlet.java',
  data-highlight='17-47')
    :markdown
      ## The Planet's Directory: Connect the caller to another number

      In this servlet, we grab the caller's selection from the request and store
      it in a variable called `selectedOption`. We then use a
      [`Dial`](https://www.twilio.com/docs/api/twiml/dial) verb with
      the appropriate phone number to connect our caller to her home
      planet.

      The current numbers are hardcoded, but they could also be
      read from a database or from a file.

  .step
    :markdown
      ## Where to next?

      That's it! We've just implemented an IVR phone tree that will delight
      and serve your customers.

      If you're a Java developer working with Twilio, you might enjoy these
      other tutorials:

      [**Automated Survey**](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/java/spark)
      _(Spark)_

      Instantly collect structured data from your users with a survey
      conducted over a voice call or SMS text messages.

      [**Click-To-Call**](https://www.twilio.com/docs/tutorials/walkthrough/click-to-call/java/servlets)
      _(Servlets)_

      Click-to-call enables your company to convert web traffic into phone calls
      with the click of a button.

      ### Did this help?

      Thanks for checking this tutorial out! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](//twitter.com/twilio) to let us know what you think.
